{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/actions.ts"],"sourcesContent":["'use server';\n\nimport * as mongoDB from \"mongodb\";\nimport { sub } from 'date-fns';\nimport { revalidatePath } from \"next/cache\";\n\nconst client = new mongoDB.MongoClient(\"mongodb://blitz:27017\");\nlet db: mongoDB.Db | null = null;\nlet range: string = \"day\";\nlet degree: string = \"celsius\";\n\ninterface Item {\n    time: string;\n    temp: number;\n}\nlet temps: Item[] = [];\n\nasync function connect() {\n    await client.connect();\n    db = client.db(\"wine\");\n    console.log(\"Connected to MongoDB\");\n}\n\nfunction halfSize(rawTemps: mongoDB.WithId<mongoDB.BSON.Document>[]) {\n    console.log('starting length: ', rawTemps.length);\n    var prevTime = '';\n    var prevItem: mongoDB.WithId<mongoDB.BSON.Document> | null = null;\n    for (var item of rawTemps) {\n        if (prevTime === null) {\n            prevItem = item;\n        } else {\n            var d1msecs = (prevItem!.time as Date).getTime();\n            var d2msecs = (item.time as Date).getTime();\n            var avgTime = (d1msecs + d2msecs) / 2;\n            var result = new Date(avgTime).toISOString();\n            var temp = (prevItem!.value + item.value) / 2;\n            temps.push({ time: result, temp: degree == 'celsius' ? temp : ((temp * 9 / 5) + 32) });\n        }\n    }\n    console.log('new length: ', temps.length)\n}\n\nexport async function getTemps() {\n    if (!db) {\n        await connect();\n    }\n    var delta = 0;\n    switch (range) {\n        case \"all\": delta = 24 * 365; break;\n        case 'hour': delta = 1; break;\n        case '2hours': delta = 2; break;\n        case '6hours': delta = 6; break;\n        case '12hours': delta = 12; break;\n        case 'day': delta = 24; break;\n        case '2day': delta = 48; break;\n        case 'week': delta = 7 * 24; break;\n        case 'month': delta = 30 * 24; break;\n    }\n    var compare = new Date();\n    // console.log('Today is: ' + compare.toISOString());\n    compare = sub(compare, { hours: delta });\n    var search = { \"time\": { $gt: compare } };\n    // console.log(search);\n    var rawTemps = await db!.collection(\"temps\").find(search, { sort: [[\"time\", \"desc\"]] }).toArray();\n    temps = [];\n    if (rawTemps.length > 5000) {\n        halfSize(rawTemps)\n    }\n    rawTemps.forEach(doc => {\n        doc.time = (doc.time as Date).toISOString();\n        temps.push({ time: doc.time, temp: degree == 'celsius' ? doc.value : ((doc.value * 9 / 5) + 32) });\n    });\n    // console.log(temps)\n    console.log(\"Fetched \", temps.length, \"records\");\n    return { temps: temps, degree: degree, range: range };\n}\n\nexport async function setRange(newRange: string) {\n    range = newRange;\n    console.log(\"Range set to \", range);\n    revalidatePath(\"/\");\n}\nexport async function setDegree(newDegree: string) {\n    degree = newDegree;\n    console.log(\"Degree set to \", degree);\n    revalidatePath(\"/\");\n}"],"names":[],"mappings":";;;;;;;IA6EsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/actions.ts"],"sourcesContent":["'use server';\n\nimport * as mongoDB from \"mongodb\";\nimport { sub } from 'date-fns';\nimport { revalidatePath } from \"next/cache\";\n\nconst client = new mongoDB.MongoClient(\"mongodb://blitz:27017\");\nlet db: mongoDB.Db | null = null;\nlet range: string = \"day\";\nlet degree: string = \"celsius\";\n\ninterface Item {\n    time: string;\n    temp: number;\n}\nlet temps: Item[] = [];\n\nasync function connect() {\n    await client.connect();\n    db = client.db(\"wine\");\n    console.log(\"Connected to MongoDB\");\n}\n\nfunction halfSize(rawTemps: mongoDB.WithId<mongoDB.BSON.Document>[]) {\n    console.log('starting length: ', rawTemps.length);\n    var prevTime = '';\n    var prevItem: mongoDB.WithId<mongoDB.BSON.Document> | null = null;\n    for (var item of rawTemps) {\n        if (prevTime === null) {\n            prevItem = item;\n        } else {\n            var d1msecs = (prevItem!.time as Date).getTime();\n            var d2msecs = (item.time as Date).getTime();\n            var avgTime = (d1msecs + d2msecs) / 2;\n            var result = new Date(avgTime).toISOString();\n            var temp = (prevItem!.value + item.value) / 2;\n            temps.push({ time: result, temp: degree == 'celsius' ? temp : ((temp * 9 / 5) + 32) });\n        }\n    }\n    console.log('new length: ', temps.length)\n}\n\nexport async function getTemps() {\n    if (!db) {\n        await connect();\n    }\n    var delta = 0;\n    switch (range) {\n        case \"all\": delta = 24 * 365; break;\n        case 'hour': delta = 1; break;\n        case '2hours': delta = 2; break;\n        case '6hours': delta = 6; break;\n        case '12hours': delta = 12; break;\n        case 'day': delta = 24; break;\n        case '2day': delta = 48; break;\n        case 'week': delta = 7 * 24; break;\n        case 'month': delta = 30 * 24; break;\n    }\n    var compare = new Date();\n    // console.log('Today is: ' + compare.toISOString());\n    compare = sub(compare, { hours: delta });\n    var search = { \"time\": { $gt: compare } };\n    // console.log(search);\n    var rawTemps = await db!.collection(\"temps\").find(search, { sort: [[\"time\", \"desc\"]] }).toArray();\n    temps = [];\n    if (rawTemps.length > 5000) {\n        halfSize(rawTemps)\n    }\n    rawTemps.forEach(doc => {\n        doc.time = (doc.time as Date).toISOString();\n        temps.push({ time: doc.time, temp: degree == 'celsius' ? doc.value : ((doc.value * 9 / 5) + 32) });\n    });\n    // console.log(temps)\n    console.log(\"Fetched \", temps.length, \"records\");\n    return { temps: temps, degree: degree, range: range };\n}\n\nexport async function setRange(newRange: string) {\n    range = newRange;\n    console.log(\"Range set to \", range);\n    revalidatePath(\"/\");\n}\nexport async function setDegree(newDegree: string) {\n    degree = newDegree;\n    console.log(\"Degree set to \", degree);\n    revalidatePath(\"/\");\n}"],"names":[],"mappings":";;;;;;;IAkFsB,YAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/select.tsx"],"sourcesContent":["'use client';\n\nimport { setRange, setDegree } from \"./actions\";\n\nexport default function Select({ data }: { data: {temps: { time: string; temp: number }[], degree: string, range: string }}) {\n    \n    const handleSelect = (event: any) => {\n        console.log('Selected range:', event.target.value);\n        setRange(event.target.value);\n    }\n    function handleRadio(event: any) {\n        console.log('Selected degree:', event.target.value);\n        setDegree(event.target.value);\n    }\n    return (\n        <main>\n            <div className=\"flex flex-row\">\n                <label>Show: &nbsp;\n                    <select name=\"range\" defaultValue={data.range} onChange={handleSelect} className=\"border border-blue-500 text-xs\">\n                        <option value=\"all\">all</option>\n                        <option value=\"hour\">last hour</option>\n                        <option value=\"2hours\">last 2 hours</option>\n                        <option value=\"6hours\">last 6 hours</option>\n                        <option value=\"12hours\">last 12 hours</option>\n                        <option value=\"day\">last 24 hours</option>\n                        <option value=\"2day\">last 48 hours</option>\n                        <option value=\"week\">last 7 days</option>\n                        <option value=\"month\">last 30 days</option>\n                        <option value=\"day\">Cold Room</option>\n                    </select>\n                </label>&nbsp;&nbsp;\n                <div onChange={handleRadio}>\n                    Select degrees:&nbsp;\n                    <label className=\"text-xs\"> <input type=\"radio\" value=\"fahrenheit\" name=\"degree\" defaultChecked={data.degree==\"fahrenheit\"} /> Fahrenheit</label>\n                    <label className=\"text-xs\"> <input type=\"radio\" value=\"celsius\" name=\"degree\" defaultChecked={data.degree==\"celsius\"}/> Celsius</label>\n                </div>\n            </div>\n        </main>\n    );\n}"],"names":[],"mappings":";;;;;AAEA;AAAA;AAFA;;;AAIe,SAAS,OAAO,EAAE,IAAI,EAAsF;IAEvH,MAAM,eAAe,CAAC;QAClB,QAAQ,GAAG,CAAC,mBAAmB,MAAM,MAAM,CAAC,KAAK;QACjD,IAAA,0JAAQ,EAAC,MAAM,MAAM,CAAC,KAAK;IAC/B;IACA,SAAS,YAAY,KAAU;QAC3B,QAAQ,GAAG,CAAC,oBAAoB,MAAM,MAAM,CAAC,KAAK;QAClD,IAAA,2JAAS,EAAC,MAAM,MAAM,CAAC,KAAK;IAChC;IACA,qBACI,6LAAC;kBACG,cAAA,6LAAC;YAAI,WAAU;;8BACX,6LAAC;;wBAAM;sCACH,6LAAC;4BAAO,MAAK;4BAAQ,cAAc,KAAK,KAAK;4BAAE,UAAU;4BAAc,WAAU;;8CAC7E,6LAAC;oCAAO,OAAM;8CAAM;;;;;;8CACpB,6LAAC;oCAAO,OAAM;8CAAO;;;;;;8CACrB,6LAAC;oCAAO,OAAM;8CAAS;;;;;;8CACvB,6LAAC;oCAAO,OAAM;8CAAS;;;;;;8CACvB,6LAAC;oCAAO,OAAM;8CAAU;;;;;;8CACxB,6LAAC;oCAAO,OAAM;8CAAM;;;;;;8CACpB,6LAAC;oCAAO,OAAM;8CAAO;;;;;;8CACrB,6LAAC;oCAAO,OAAM;8CAAO;;;;;;8CACrB,6LAAC;oCAAO,OAAM;8CAAQ;;;;;;8CACtB,6LAAC;oCAAO,OAAM;8CAAM;;;;;;;;;;;;;;;;;;gBAEpB;8BACR,6LAAC;oBAAI,UAAU;;wBAAa;sCAExB,6LAAC;4BAAM,WAAU;;gCAAU;8CAAC,6LAAC;oCAAM,MAAK;oCAAQ,OAAM;oCAAa,MAAK;oCAAS,gBAAgB,KAAK,MAAM,IAAE;;;;;;gCAAgB;;;;;;;sCAC9H,6LAAC;4BAAM,WAAU;;gCAAU;8CAAC,6LAAC;oCAAM,MAAK;oCAAQ,OAAM;oCAAU,MAAK;oCAAS,gBAAgB,KAAK,MAAM,IAAE;;;;;;gCAAY;;;;;;;;;;;;;;;;;;;;;;;;AAK3I;KAnCwB","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/actions.ts"],"sourcesContent":["'use server';\n\nimport * as mongoDB from \"mongodb\";\nimport { sub } from 'date-fns';\nimport { revalidatePath } from \"next/cache\";\n\nconst client = new mongoDB.MongoClient(\"mongodb://blitz:27017\");\nlet db: mongoDB.Db | null = null;\nlet range: string = \"day\";\nlet degree: string = \"celsius\";\n\ninterface Item {\n    time: string;\n    temp: number;\n}\nlet temps: Item[] = [];\n\nasync function connect() {\n    await client.connect();\n    db = client.db(\"wine\");\n    console.log(\"Connected to MongoDB\");\n}\n\nfunction halfSize(rawTemps: mongoDB.WithId<mongoDB.BSON.Document>[]) {\n    console.log('starting length: ', rawTemps.length);\n    var prevTime = '';\n    var prevItem: mongoDB.WithId<mongoDB.BSON.Document> | null = null;\n    for (var item of rawTemps) {\n        if (prevTime === null) {\n            prevItem = item;\n        } else {\n            var d1msecs = (prevItem!.time as Date).getTime();\n            var d2msecs = (item.time as Date).getTime();\n            var avgTime = (d1msecs + d2msecs) / 2;\n            var result = new Date(avgTime).toISOString();\n            var temp = (prevItem!.value + item.value) / 2;\n            temps.push({ time: result, temp: degree == 'celsius' ? temp : ((temp * 9 / 5) + 32) });\n        }\n    }\n    console.log('new length: ', temps.length)\n}\n\nexport async function getTemps() {\n    if (!db) {\n        await connect();\n    }\n    var delta = 0;\n    switch (range) {\n        case \"all\": delta = 24 * 365; break;\n        case 'hour': delta = 1; break;\n        case '2hours': delta = 2; break;\n        case '6hours': delta = 6; break;\n        case '12hours': delta = 12; break;\n        case 'day': delta = 24; break;\n        case '2day': delta = 48; break;\n        case 'week': delta = 7 * 24; break;\n        case 'month': delta = 30 * 24; break;\n    }\n    var compare = new Date();\n    // console.log('Today is: ' + compare.toISOString());\n    compare = sub(compare, { hours: delta });\n    var search = { \"time\": { $gt: compare } };\n    // console.log(search);\n    var rawTemps = await db!.collection(\"temps\").find(search, { sort: [[\"time\", \"desc\"]] }).toArray();\n    temps = [];\n    if (rawTemps.length > 5000) {\n        halfSize(rawTemps)\n    }\n    rawTemps.forEach(doc => {\n        doc.time = (doc.time as Date).toISOString();\n        temps.push({ time: doc.time, temp: degree == 'celsius' ? doc.value : ((doc.value * 9 / 5) + 32) });\n    });\n    // console.log(temps)\n    console.log(\"Fetched \", temps.length, \"records\");\n    return { temps: temps, degree: degree, range: range };\n}\n\nexport async function setRange(newRange: string) {\n    range = newRange;\n    console.log(\"Range set to \", range);\n    revalidatePath(\"/\");\n}\nexport async function setDegree(newDegree: string) {\n    degree = newDegree;\n    console.log(\"Degree set to \", degree);\n    revalidatePath(\"/\");\n}"],"names":[],"mappings":";;;;;;;IA0CsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/update.tsx"],"sourcesContent":["'use client';\n\nimport { getTemps } from \"./actions\";\n\nexport default function Update({ data }: { data: {temps: { time: string; temp: number }[], degree: string }}) {\n    function last() {\n        if (data.temps == null || data.temps.length == 0) {\n            return \"\"\n        } else {\n            // console.log(this.temps.length)\n            var lastEntry = data.temps[0]\n            var sum = 0;\n            for (var item of data.temps) {\n                sum += item.temp;\n            }\n           let average = sum / data.temps.length;\n            var temp = Math.round(lastEntry.temp * 10) / 10 + '\\xB0'\n            var avg = Math.round(average * 10) / 10 + '\\xB0'\n            return temp + \"(avg: \" + avg + \") at \" + new Date(lastEntry.time).toString().slice(0, 21);\n        }\n    }\n    const handleClick = () => {\n        getTemps().then((temps) => {\n            console.log('Fetched updated temps:', temps.temps.length);\n        });\n    };\n\n    return (\n        <main className=\"justify-self-end\">\n            { last() }&nbsp;&nbsp;\n            <button onClick={handleClick} className=\"bg-transparent px-1 text-blue-700 text-xs border border-blue-500\">\n                Update\n            </button>\n        </main>\n    );\n}"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAIe,SAAS,OAAO,EAAE,IAAI,EAAuE;IACxG,SAAS;QACL,IAAI,KAAK,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC,MAAM,IAAI,GAAG;YAC9C,OAAO;QACX,OAAO;YACH,iCAAiC;YACjC,IAAI,YAAY,KAAK,KAAK,CAAC,EAAE;YAC7B,IAAI,MAAM;YACV,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAE;gBACzB,OAAO,KAAK,IAAI;YACpB;YACD,IAAI,UAAU,MAAM,KAAK,KAAK,CAAC,MAAM;YACpC,IAAI,OAAO,KAAK,KAAK,CAAC,UAAU,IAAI,GAAG,MAAM,KAAK;YAClD,IAAI,MAAM,KAAK,KAAK,CAAC,UAAU,MAAM,KAAK;YAC1C,OAAO,OAAO,WAAW,MAAM,UAAU,IAAI,KAAK,UAAU,IAAI,EAAE,QAAQ,GAAG,KAAK,CAAC,GAAG;QAC1F;IACJ;IACA,MAAM,cAAc;QAChB,IAAA,0JAAQ,IAAG,IAAI,CAAC,CAAC;YACb,QAAQ,GAAG,CAAC,0BAA0B,MAAM,KAAK,CAAC,MAAM;QAC5D;IACJ;IAEA,qBACI,6LAAC;QAAK,WAAU;;YACV;YAAQ;0BACV,6LAAC;gBAAO,SAAS;gBAAa,WAAU;0BAAmE;;;;;;;;;;;;AAKvH;KA/BwB","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///Users/raimundege/WineStorage/wine-next/app/chart.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    TimeScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { de, enUS } from 'date-fns/locale';\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    TimeScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nexport default function Chart({ data }: { data: {temps: { time: string; temp: number }[], degree: string, range: string }}) {\n    var dateData: { x: Date, y: number }[] = [];\n    var idealLow: { x: Date, y: number }[] = [];\n    var idealHigh: { x: Date, y: number }[] = [];\n    var minTemp = 100, maxTemp = 0;\n    for (var item of data.temps) {\n        var time = new Date(item.time);\n        if (item.temp < minTemp) minTemp = item.temp;\n        if (item.temp > maxTemp) maxTemp = item.temp;\n        dateData.push({ x: time, y: item.temp });\n        idealLow.push({ x: time, y: data.degree == 'celsius' ? 16.67 : 62.0 });\n        idealHigh.push({ x: time, y: data.degree == 'celsius' ? 20 : 68.0 });\n    }\n    const lineData: any = {\n        datasets: [\n            { data: dateData, label: 'actual', borderColor: '#f00' },\n            { data: idealLow, label: 'ideal low', borderColor: '#0f0', borderWidth: '1', borderDash: [5, 5] },\n            { data: idealHigh, label: 'ideal high', borderColor: '#00f', borderWidth: '1', borderDash: [5, 5] },\n        ]\n    };\n    var tickFormat = 'MMM d, HH:mm';\n    switch (data.range) {   \n        case 'hour': \n        case '2hours': \n        case '6hours': \n        case '12hours': \n        case 'day': tickFormat = 'HH:MM'; break;\n    }\n    const options: any = {\n        scales: {\n            x: {\n                // adapters: {\n                //     date: {\n                //         locale: enUS\n                //     }\n                // },\n                grid: { display: false },\n                type: 'time',\n                time: {\n                    unit: 'hour',\n                    displayFormats: { hour: tickFormat }\n                }\n            },\n            y: {\n                min: minTemp - (data.degree == 'celsius' ? 5 : 9),\n                max: maxTemp + (data.degree == 'celsius' ? 5 : 9),\n                grid: { display: false },\n                ticks: { stepSize: 5 },\n            },\n        },\n        pointStyle: false,\n    };\n    return (\n        <main>\n            <Line data={lineData} options={options} />\n        </main>\n    );\n}"],"names":[],"mappings":";;;;;AAEA;AAWA;AACA;AAdA;;;;;AAgBA,wKAAO,CAAC,QAAQ,CACZ,gLAAa,EACb,8KAAW,EACX,4KAAS,EACT,+KAAY,EACZ,8KAAW,EACX,wKAAK,EACL,0KAAO,EACP,yKAAM;AAGK,SAAS,MAAM,EAAE,IAAI,EAAsF;IACtH,IAAI,WAAqC,EAAE;IAC3C,IAAI,WAAqC,EAAE;IAC3C,IAAI,YAAsC,EAAE;IAC5C,IAAI,UAAU,KAAK,UAAU;IAC7B,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAE;QACzB,IAAI,OAAO,IAAI,KAAK,KAAK,IAAI;QAC7B,IAAI,KAAK,IAAI,GAAG,SAAS,UAAU,KAAK,IAAI;QAC5C,IAAI,KAAK,IAAI,GAAG,SAAS,UAAU,KAAK,IAAI;QAC5C,SAAS,IAAI,CAAC;YAAE,GAAG;YAAM,GAAG,KAAK,IAAI;QAAC;QACtC,SAAS,IAAI,CAAC;YAAE,GAAG;YAAM,GAAG,KAAK,MAAM,IAAI,YAAY,QAAQ;QAAK;QACpE,UAAU,IAAI,CAAC;YAAE,GAAG;YAAM,GAAG,KAAK,MAAM,IAAI,YAAY,KAAK;QAAK;IACtE;IACA,MAAM,WAAgB;QAClB,UAAU;YACN;gBAAE,MAAM;gBAAU,OAAO;gBAAU,aAAa;YAAO;YACvD;gBAAE,MAAM;gBAAU,OAAO;gBAAa,aAAa;gBAAQ,aAAa;gBAAK,YAAY;oBAAC;oBAAG;iBAAE;YAAC;YAChG;gBAAE,MAAM;gBAAW,OAAO;gBAAc,aAAa;gBAAQ,aAAa;gBAAK,YAAY;oBAAC;oBAAG;iBAAE;YAAC;SACrG;IACL;IACA,IAAI,aAAa;IACjB,OAAQ,KAAK,KAAK;QACd,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YAAO,aAAa;YAAS;IACtC;IACA,MAAM,UAAe;QACjB,QAAQ;YACJ,GAAG;gBACC,cAAc;gBACd,cAAc;gBACd,uBAAuB;gBACvB,QAAQ;gBACR,KAAK;gBACL,MAAM;oBAAE,SAAS;gBAAM;gBACvB,MAAM;gBACN,MAAM;oBACF,MAAM;oBACN,gBAAgB;wBAAE,MAAM;oBAAW;gBACvC;YACJ;YACA,GAAG;gBACC,KAAK,UAAU,CAAC,KAAK,MAAM,IAAI,YAAY,IAAI,CAAC;gBAChD,KAAK,UAAU,CAAC,KAAK,MAAM,IAAI,YAAY,IAAI,CAAC;gBAChD,MAAM;oBAAE,SAAS;gBAAM;gBACvB,OAAO;oBAAE,UAAU;gBAAE;YACzB;QACJ;QACA,YAAY;IAChB;IACA,qBACI,6LAAC;kBACG,cAAA,6LAAC,iKAAI;YAAC,MAAM;YAAU,SAAS;;;;;;;;;;;AAG3C;KAzDwB","debugId":null}}]
}